/*
YOUR FIRST CSS FILE:

    (1) Exercise 1: CSS "rules" 
        (ie) p{
                    background-color: blue;
                    color: white;
            }
            - when imported and applied, it will style all elements that apply to its rule at once -> paragraphs 
            - this is a better way of doing a style attribute within HTML as we had previously used
                to create this type of functionality: <p style={{ backgroundColor: "blue", color: "white" }}>
*/




/*---------------------------------------------------------------------------*/
/*-----------------3.1.3 Selecting content with ID selectors-----------------*/
/*---------------------------------------------------------------------------*/
/*
    -   The CSS rules in previous exercises styled all paragraphs at once by 
        using the name of the tag p and then specifying the style property 
        values. Instead of changing the look and feel of all the elements of 
        the same name, e.g., p, we can refer to a specific element by their ID, 
        an attribute specifying a unique identifier. 
*/
p#wd-id-selector-1 {
    background-color: red;
    color: white;
   }
p#wd-id-selector-2 {
    background-color: yellow;
    color: black;
   }


/*---------------------------------------------------------------------------*/
/*----------------3.1.4 Selecting Content with Class Selectors---------------*/
/*---------------------------------------------------------------------------*/
/*
    -   Instead of using IDs to refer to specific elements, you can use an 
        element's class attribute instead, or a combination of both. 
    -   Class selectors can be used just like ID selectors if you keep them 
        unique, but can also be used to apply the same style to several 
        elements, even if they are different types of elements. 
*/ 

.wd-class-selector {
    background-color: yellow;
    color: blue;
}


/*---------------------------------------------------------------------------*/
/*----------3.1.5 Selecting Content based on the Document Structure----------*/
/*---------------------------------------------------------------------------*/
/*
    -   Selectors can be combined to refer to elements in particular places 
        in the document. 
    -   A set of selectors separated by a space can refer to elements in a 
        hierarchy. For instance: .selector1 .selector2 { â€¦ } refers to an 
        element whose class is .selector2 and is inside some descendant of 
        another element whose class is .selector1. 
    -   If we use ">" instead to separate the classes, then we can establish a 
        direct parent/child relationship. 
*/ 

/* refers to .wd-selector-3 as a descendant of .wd-selector-1 */
.wd-selector-1 .wd-selector-3 {
    background-color: red;
    color: white;
 }

/* refers to .wd-selector-4 as a direct child of .wd-selector-3
    which is a direct child of .wd-selector-2 */
 .wd-selector-2 > .wd-selector-3 > .wd-selector-4 {
    background-color: yellow;
    color: blue;
 }


/*---------------------------------------------------------------------------*/
/*--------------------3.1.7 Styling the Foreground Color---------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   Foreground colors can be configured using the CSS color property by 
        selecting some DOM element and setting its color property
        (ie) .some-css-selector {color: blue;}
    -   Colors can be defined via strings, HEX values, or RGB values
*/ 
.wd-fg-color-black { color: black; }
.wd-fg-color-white { color: white; }
.wd-fg-color-blue { color: #7070ff; }
.wd-fg-color-red { color: #ff7070; }
.wd-fg-color-green { color: green; }



/*---------------------------------------------------------------------------*/
/*--------------------3.1.8 Styling the Background Color---------------------*/
/*---------------------------------------------------------------------------*/

.wd-bg-color-yellow {background-color: #ffff07;}
.wd-bg-color-blue {background-color: #7070ff;}
.wd-bg-color-red {background-color: #ff7070;}
.wd-bg-color-green {background-color: green;}
.wd-bg-color-gray {background-color: lightgray;}


/*---------------------------------------------------------------------------*/
/*--------------------------3.1.9 Styling Borders----------------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   Sample of boarder customizations
*/

.wd-border-fat {border-width: 20px 30px 20px 30px; }
.wd-border-thin {border-width: 4px; }
.wd-border-solid {border-style: solid; }
.wd-border-dashed {border-style: dashed; }
.wd-border-yellow {border-color: #ffff07; }
.wd-border-red {border-color: #ff7070; }
.wd-border-blue {border-color: #7070ff; }


/*---------------------------------------------------------------------------*/
/*----------------------3.1.10 Styling Margins/Padding-----------------------*/
/*---------------------------------------------------------------------------*/

.wd-padded-top-left {
    padding-top: 50px;
    padding-left: 50px;
  }
  
.wd-padded-bottom-right {
    padding-bottom: 50px;
    padding-right: 50px;
}

.wd-padding-fat {
    padding: 50px;
}

.wd-margin-bottom {
    margin-bottom: 50px;
}
  
.wd-margin-right-left {
    margin-left: 50px;
    margin-right: 50px;
}

.wd-margin-all-around {
    margin: 30px;
}

/*---------------------------------------------------------------------------*/
/*--------------------------3.1.11 Styling Corners---------------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   You can configure the corners of element borders to be rounded. 
        Either all of them at once or specific corners. You can do this by 
        configuring a border's radius.
*/
.wd-rounded-corners-top {
    border-top-left-radius: 40px;
    border-top-right-radius: 40px;
}
.wd-rounded-corners-bottom {
border-bottom-left-radius: 40px;
border-bottom-right-radius: 40px;
}
.wd-rounded-corners-all-around {
border-radius: 50px;
}
.wd-rounded-corners-inline {
border-radius: 30px 0px 20px 50px;
}

/*---------------------------------------------------------------------------*/
/*-------------------------3.1.12 Styling Dimensions-------------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   You can configure an element's dimensions with width and height 
        properties.
*/
.wd-dimension-portrait {
    width: 75px;
    height: 100px;
 }
.wd-dimension-landscape {
    width: 100px;
    height: 75px;
 }
.wd-dimension-square {
    width: 75px;
    height: 75px;
 }
 
/*---------------------------------------------------------------------------*/
/*----------------------3.1.13 Styling Relative Position---------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   You can configure an element's position with the position property. 
    -   The property has many possible values, but we'll explore relative, 
        absolute, and static. Setting position property to relative allows 
        moving the element relative to its original position. 
*/
.wd-pos-relative-nudge-up-right {
    position: relative;
    bottom: 30px;
    left: 30px;
 }
 .wd-pos-relative-nudge-down-right {
    position: relative;
    top: 20px;
    left: 20px;
 }
 .wd-pos-relative {
    position: relative;
 }
 

/*---------------------------------------------------------------------------*/
/*----------------------3.1.14 Styling Absolute Position---------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   Setting position property to absolute allows moving the element 
        relative to the position of its parent. To practice setting element's 
        absolute position, copy the CSS and HTML below into index.css and 
        index.tsx. 
    -   Notice several <br/> elements were added at the end of the example 
        to make room for the next exercise. 
*/

.wd-pos-absolute-10-10 {
    position: absolute;
    top: 10px;
    left: 10px;
 }
.wd-pos-absolute-50-50 {
    position: absolute;
    top: 50px;
    left: 50px;
 }
.wd-pos-absolute-120-20 {
    position: absolute;
    top: 20px;
    left: 120px;      
}


/*---------------------------------------------------------------------------*/
/*------------------------3.1.15 Styling Fixed Position----------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   Setting position property to fixed allows setting the element 
        relative to the window. That means that if you scroll the content of 
        the page, the element will not scroll with it. To practice setting 
        element's fixed position, copy the CSS and HTML below into index.css 
        and index.tsx and confirm the browser renders as shown. 
    -   Your display may be different depending on the actual size of the 
        screen and scrolling.
*/

.wd-pos-fixed {
    position: fixed;
    right: 0px;
    bottom: 50%;
}
  

/*---------------------------------------------------------------------------*/
/*----------------------------3.1.16 Styling Z Index-------------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   When the browser renders content declared in HTML documents, it 
        calculates positions and dimensions so every element has a dedicated 
        rectangle on the window. 
    -   Typically elements don't fall on top of each other. When you start 
        moving elements with position, then overlapping elements are possible. 
        By default elements are rendered in the order declared in HTML 
        documents. 
    -   Elements declared later render on top of elements declared earlier. 
    -   The z-index CSS property overrides this behavior. 
    -   Default value of z-index is auto, which corresponds to 0. 
    -   Increasing z-index can make elements render later, or on top of, 
        others. To practice setting an element's z-index, copy the CSS and 
        HTML below into index.css and index.tsx.
*/

.wd-zindex-bring-to-front {
    z-index: 10;
 }
 

/*---------------------------------------------------------------------------*/
/*----------------------3.1.17 Floating Images adn Content-------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   HTML does not support laying out content horizontally. The CSS float 
        property allows fixing that. To practice laying out content 
        horizontally
*/

.wd-float-left {
    float: left;
}
 
.wd-float-right {
    float: right;
    height: 100px;
}
 
.wd-float-done {
    clear: both;
}
 

/*---------------------------------------------------------------------------*/
/*--------------------------------3.1.18 Grids-------------------------------*/
/*---------------------------------------------------------------------------*/
/*
    -   Using float we can implement a grid layout made up of rows and columns. 
*/

.wd-grid-row {
    clear: both;
}

.wd-grid-col-half-page {
    width: 50%;
    float: left;
}

.wd-grid-col-third-page {
    width: 33%;
    float: left;
}

.wd-grid-col-two-thirds-page {
    width: 67%;
    float: left;
}

.wd-grid-col-left-sidebar {
    width: 20%;
    float: left;
}

.wd-grid-col-main-content {
    width: 60%;
    float: left;
}

.wd-grid-col-right-sidebar {
    width: 20%;
    float: left;
}
 




















/*
ADDITIONAL NOTES ON CSS: Cascasding Style Sheets

- Declarative language: CSS declares the style of html
- CSS and HTML work together to implement the static portion of the user interface
- HTML says what is displayed, CSS says how it is displayed
- CSS can be implemented or applied to HTML in several low-level ways:
    (1) style attribute - applied to HTML documents: embed css inside html as a string and name value pairs - directly
        edits HTML documents -- so we arent going to be using this since we will be editing
        javascript/typescript documents
        (i.e.) <p style="color: green">This paragraph is now has green text.</p>
    (2) style tag - embedded in the html document: you can use expressions to refer to elements in DOM
        (i.e.) <style> p { text-align center; ... + other key value pairs of CSS.. } </style>
                this would make all p's, paragraphs, centered.
    (3) css link - linked to external file: instead of specifiying the html inside the document, you link it outside
        the document so it can be reused for multiple pages.
        (i.e.) <link href="/some/external/style/file.css" rel="stylesheet"/>
- We will be importing CSS via from within our javascript files.
    - browser actually understands the key value pairs -> style="color: green", however, because we are importing our css
        from within our javascript files, a layer of abstraction, our code inside the javascript files uses a modified version
        of HTML which is much more powerful as it allows us to embed javascript inside html and html inside javascript
        looks different
            (1) style attribute's in javascript: inside javascript, style attributes still configure look and feel of specific
                HTML elements, and is considered BAD PRACTICE... fine tho?
                    - Technical differences:
                        - style attribute is no longer a string, but an expression - we know this because of the inner 
                            curly braces, i.e. <p style = {{backgroundColor: "yellow"}}>This paragraph is now
                            highlighted yellow</p>. The outer curly braces tell us this ojbect is an expression. 
                        - an expression must evaluate to a JSON object directly, or call a function that eventually evalutates to
                            a JSON object
                        - expressions are camelCase: backgroundColo, etc
                        - note: experssions contain objects (i.e. backgroundColor is an object) unlike style attributes/tags 
                            that contain strings
            (2) style elements in javascript: inside javascript, declare CSS rules and then browser tries to run these rules
                and see which elements in the DOM tree match these rules. One of the more common types of rules is class rule:
                class rules are patternmatched to class-name attribute by beginning with a period and declare class rules
                in conjuction with className attribute. i.e.: .background-yellow, .background-blue, etc.
                style elements configure style in current web pages and is considered BAD practice... but a more common way you will 
                see it.. 
                - (ie) <style>  .background-yellow { background-color: yellow; }
                                .background-blue {background-color: blue; }
                                .background-red {background-color: red; }
                                .color-white    {color: white; }
                        </style>
                        <p className="background-yellow">This paragraph is yellow</p>
                        <p className="background-blue color-white">This paragraph has blue background and white text</p>
                        <p className="background-red color-white">THis paragraph has red background and white text</p>j
                - notice that this is different then declaring the style right on the element how we saw it used in HTML,
                    another example of abstraction inherent in using javascript
            (3) link element: apply same look and feel to mulitple web pages and is considered best practice
                (i.e.) inside styles.css have rules, and then import "./styles.css"; as needed which will apply rules based
                on className attribute
    
    Basic Styling in CSS:
    - color property: configures the foreground color
        (i.e.) 
        color: "blue"; color is property and "blue" is value
    - background property: configures the background color
    - fontWeight property: "bold", **best way to create bold, underlined, italicized text even tho tags still exist; can use numbers
    - fontFamily property: "courier", 
    - fontSize property: "20px" **default is 16px**


    Utility Style Classes: classes we can reuse in order to apply certain styles to elements
    */

